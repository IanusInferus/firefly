$Comment
    ==========================================================================

      File:        MetaSchemaCsTemplate.tree
      Location:    Firefly.MetaSchemaManipulator <Tree>
      Description: 元类型结构C#模板数据
      Version:     2011.09.24.
      Copyright(C) F.R.C.

    ==========================================================================

MetaSchemaTemplate
    Keywords
        $List String
            abstract
            event
            new
            struct
            as
            explicit
            null
            switch
            base
            extern
            object
            this
            bool
            false
            operator
            throw
            break
            finally
            out
            true
            byte
            fixed
            override
            try
            case
            float
            params
            typeof
            catch
            for
            private
            uint
            char
            foreach
            protected
            ulong
            checked
            goto
            public
            unchecked
            class
            if
            readonly
            unsafe
            const
            implicit
            ref
            ushort
            continue
            in
            return
            using
            decimal
            int
            sbyte
            virtual
            default
            interface
            sealed
            volatile
            delegate
            internal
            short
            void
            do
            is
            sizeof
            while
            double
            lock
            stackalloc
            else
            long
            static
            enum
            namespace
            string
            get
            partial
            set
            value
            where
            yield
    PrimitiveMappings
        PrimitiveMapping
            Name Unit
            PlatformName Firefly.Mapping.MetaSchema.Unit
        PrimitiveMapping
            Name BooleanLiteral
            PlatformName System.Boolean
        PrimitiveMapping
            Name IntegerLiteral
            PlatformName System.Int64
        PrimitiveMapping
            Name StringLiteral
            PlatformName System.String
    Templates
        Template
            Name MainWithNamespace
            //Parameters: ${Header}, ${NamespaceName}, ${Primitives}, ${ComplexConcepts}
            Value
                $String
                    ${Header}
                    ${Primitives}

                    namespace [[${NamespaceName}]]
                    {
                        ${ComplexConcepts}
                    }

                $End
        Template
            Name MainWithoutNamespace
            //Parameters: ${Header}, ${Primitives}, ${ComplexConcepts}
            Value
                $String
                    ${Header}
                    ${Primitives}

                    ${ComplexConcepts}

                $End
        Template
            Name Header
            //Parameters:
            Value
                $String
                    //==========================================================================
                    //
                    //  Notice:      This file is automatically generated.
                    //               Please don't modify this file.
                    //
                    //==========================================================================

                    using System;
                    using System.Diagnostics;
                    using Firefly;
                    using Firefly.Mapping;
                    using Firefly.Mapping.MetaSchema;
        Template
            Name Primitive
            //Parameters: ${Name}, ${PlatformName}
            Value
                $String
                    using [[${Name}]] = ${PlatformName};
        Template
            Name Alias
            //Parameters: ${Name}, ${Type}
            Value
                $String
                    [Alias, DebuggerDisplay("{ToString()}")]
                    public sealed class [[${Name}]]
                    {
                        public [[${Type}]] Value;

                        public static implicit operator [[${Name}]]([[${Type}]] o)
                        {
                            return new [[${Name}]] {Value = o};
                        }
                        public static implicit operator [[${Type}]]([[${Name}]] c)
                        {
                            return c.Value;
                        }

                        public override string ToString()
                        {
                            return DebuggerDisplayer.ConvertToString(this);
                        }
                    }
        Template
            Name TupleElement
            //Parameters: ${NameIndex}, ${Type}
            Value
                $String
                    public [[${Type}]] [[Item${NameIndex}]];
        Template
            Name Tuple
            //Parameters: ${Name}, ${TupleElements}
            Value
                $String
                    [Tuple, DebuggerDisplay("{ToString()}")]
                    public sealed class [[${Name}]]
                    {
                        ${TupleElements}

                        public override string ToString()
                        {
                            return DebuggerDisplayer.ConvertToString(this);
                        }
                    }
        Template
            Name Field
            //Parameters: ${Name}, ${Type}
            Value
                $String
                    public [[${Type}]] [[${Name}]];
        Template
            Name Record
            //Parameters: ${Name}, ${Fields}
            Value
                $String
                    [Record, DebuggerDisplay("{ToString()}")]
                    public sealed class [[${Name}]]
                    {
                        ${Fields}

                        public override string ToString()
                        {
                            return DebuggerDisplayer.ConvertToString(this);
                        }
                    }
        Template
            Name Alternative
            //Parameters: ${Name}, ${Type}
            Value
                $String
                    public [[${Type}]] [[${Name}]];
        Template
            Name AlternativeCreate
            //Parameters: ${TaggedUnionName}, ${Name}, ${Type}
            Value
                $String
                    public static [[${TaggedUnionName}]] [[Create${Name}]]([[${Type}]] Value) { return new [[${TaggedUnionName}]] { _Tag = [[${TaggedUnionName}Tag.${Name}]], [[${Name}]] = Value }; }
        Template
            Name AlternativeCreateUnit
            //Parameters: ${TaggedUnionName}, ${Name}
            Value
                $String
                    public static [[${TaggedUnionName}]] [[Create${Name}]]() { return new [[${TaggedUnionName}]] { _Tag = [[${TaggedUnionName}Tag.${Name}]], [[${Name}]] = new Unit() }; }
        Template
            Name AlternativePredicate
            //Parameters: ${TaggedUnionName}, ${Name}
            Value
                $String
                    public Boolean [[On${Name}]] { get { return _Tag == [[${TaggedUnionName}Tag.${Name}]]; } }
        Template
            Name TaggedUnion
            //Parameters: ${Name}, ${AlternativeNames}, ${Alternatives}, ${AlternativeCreates}, ${AlternativePredicates}
            Value
                $String
                    public enum ${Name}Tag
                    {
                        [[${AlternativeNames}]],
                    }
                    [TaggedUnion, DebuggerDisplay("{ToString()}")]
                    public sealed class [[${Name}]]
                    {
                        [Tag] public [[${Name}Tag]] _Tag;
                        ${Alternatives}

                        ${AlternativeCreates}

                        ${AlternativePredicates}

                        public override string ToString()
                        {
                            return DebuggerDisplayer.ConvertToString(this);
                        }
                    }
